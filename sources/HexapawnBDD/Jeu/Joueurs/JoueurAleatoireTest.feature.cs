// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace HexapawnBDD.Jeu.Joueurs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Joueur Aléatoire")]
    public partial class JoueurAleatoireFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "JoueurAleatoireTest.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Joueur Aléatoire", "\tEn tant que Joueur Aléatoire\n\tJe veux sélectionner mon déplacement aléatoirement" +
                    "\n\tAfin de faire avancer mes pions", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Déplacement choisi parmi 3 déplacements")]
        [NUnit.Framework.CategoryAttribute("JoueurAleatoireTest")]
        public virtual void DeplacementChoisiParmi3Deplacements()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Déplacement choisi parmi 3 déplacements", null, new string[] {
                        "JoueurAleatoireTest"});
#line 8
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "depart",
                        "fin"});
            table1.AddRow(new string[] {
                        "2:0",
                        "1:0"});
            table1.AddRow(new string[] {
                        "2:1",
                        "1:1"});
            table1.AddRow(new string[] {
                        "2:2",
                        "1:2"});
#line 9
 testRunner.Given("J\'ai ces déplacements disponibles", ((string)(null)), table1, "Given ");
#line 14
 testRunner.And("l\'index tiré aléatoirement est 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 15
 testRunner.When("Je choisie un déplacement", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "depart",
                        "fin"});
            table2.AddRow(new string[] {
                        "2:1",
                        "1:1"});
#line 16
 testRunner.Then("le déplacement choisi est", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Déplacement choisi parmi 4 déplacements")]
        [NUnit.Framework.CategoryAttribute("JoueurAleatoireTest")]
        public virtual void DeplacementChoisiParmi4Deplacements()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Déplacement choisi parmi 4 déplacements", null, new string[] {
                        "JoueurAleatoireTest"});
#line 21
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "depart",
                        "fin"});
            table3.AddRow(new string[] {
                        "2:0",
                        "1:0"});
            table3.AddRow(new string[] {
                        "2:1",
                        "1:1"});
            table3.AddRow(new string[] {
                        "2:2",
                        "1:2"});
            table3.AddRow(new string[] {
                        "0:0",
                        "1:1"});
#line 22
 testRunner.Given("J\'ai ces déplacements disponibles", ((string)(null)), table3, "Given ");
#line 28
 testRunner.And("l\'index tiré aléatoirement est 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 29
 testRunner.When("Je choisie un déplacement", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "depart",
                        "fin"});
            table4.AddRow(new string[] {
                        "2:2",
                        "1:2"});
#line 30
 testRunner.Then("le déplacement choisi est", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Déplacement choisi parmi 1 déplacements")]
        [NUnit.Framework.CategoryAttribute("JoueurAleatoireTest")]
        public virtual void DeplacementChoisiParmi1Deplacements()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Déplacement choisi parmi 1 déplacements", null, new string[] {
                        "JoueurAleatoireTest"});
#line 35
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "depart",
                        "fin"});
            table5.AddRow(new string[] {
                        "2:0",
                        "1:0"});
#line 36
 testRunner.Given("J\'ai ces déplacements disponibles", ((string)(null)), table5, "Given ");
#line 39
 testRunner.And("l\'index tiré aléatoirement est 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 40
 testRunner.When("Je choisie un déplacement", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "depart",
                        "fin"});
            table6.AddRow(new string[] {
                        "2:0",
                        "1:0"});
#line 41
 testRunner.Then("le déplacement choisi est", ((string)(null)), table6, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Index tiré trop grand")]
        [NUnit.Framework.CategoryAttribute("JoueurAleatoireTest")]
        public virtual void IndexTireTropGrand()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Index tiré trop grand", null, new string[] {
                        "JoueurAleatoireTest"});
#line 47
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "depart",
                        "fin"});
            table7.AddRow(new string[] {
                        "2:0",
                        "1:0"});
            table7.AddRow(new string[] {
                        "2:1",
                        "1:1"});
            table7.AddRow(new string[] {
                        "2:2",
                        "1:2"});
#line 48
 testRunner.Given("J\'ai ces déplacements disponibles", ((string)(null)), table7, "Given ");
#line 53
 testRunner.And("l\'index tiré aléatoirement est 10", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 54
 testRunner.When("Je choisie un déplacement", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "depart",
                        "fin"});
            table8.AddRow(new string[] {
                        "2:0",
                        "1:0"});
#line 55
 testRunner.Then("le déplacement choisi est", ((string)(null)), table8, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Déplacement choisi parmi 0 déplacement")]
        [NUnit.Framework.CategoryAttribute("JoueurAleatoireTest")]
        public virtual void DeplacementChoisiParmi0Deplacement()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Déplacement choisi parmi 0 déplacement", null, new string[] {
                        "JoueurAleatoireTest"});
#line 61
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "depart",
                        "fin"});
#line 62
 testRunner.Given("J\'ai ces déplacements disponibles", ((string)(null)), table9, "Given ");
#line 64
 testRunner.And("l\'index tiré aléatoirement est 10", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 65
 testRunner.When("Je choisie un déplacement", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 66
 testRunner.Then("le déplacement choisi est vide", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
